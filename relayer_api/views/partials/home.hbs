<script>
  let serviceContractAbi = [
    {
      "constant": true,
      "inputs": [],
      "name": "slogan",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "billboardOwner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "inSlogan",
          "type": "string"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    }
  ]
  let identityProxyAbi = [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "LogActionAuthorised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "relayerReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "dataHashSignature",
          "type": "bytes"
        }
      ],
      "name": "LogActionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "rewardPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "deployerRewardPaid",
          "type": "uint256"
        }
      ],
      "name": "LogRewardsPaid",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "raw",
          "type": "bytes32"
        },
        {
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "name": "signer",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "relayerReward",
          "type": "uint256"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "data",
          "type": "bytes"
        },
        {
          "name": "dataHashSignature",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    }
  ]
  let Wallet = ethers.Wallet;
  let utils = ethers.utils;
  let url = {
    create: 'create',
    deploy: 'deploy',
    execute: 'execute'
  };

  let providers = ethers.providers;
  let config = {
    network: 'local',
    infuraApiKey: 'XTIF9kIt1kgSOOKclKG0'
  }

  function getNodeProvider() {
    if (config.network !== "local") {
      return new ethers.providers.InfuraProvider(config.network, config.infuraApikey);
    }
    return new ethers.providers.JsonRpcProvider("http://localhost:8545/");
  }

  let provider = getNodeProvider();

  let signerWallet;
  let identityAddress;
  let identityContract;
  let serviceContractAddress = '0x72E18a9812244f32aA1Bd9fB84979051DeDc8ce5'

  let donor = new ethers.Wallet('0x62ecd49c4ccb41a70ad46532aed63cf815de15864bc415c87d507afd6a5e8da2');
  donor.provider = provider;

  async function sign() {
    signerWallet = Wallet.createRandom();
    console.log(signerWallet.address);
    signerWallet.provider = provider;
    localStorage.setItem('signerWallet', JSON.stringify(signerWallet))
    let hashData = hash(signerWallet)
    let createResult = await axios({
      method: 'post',
      url: url.create,
      data: {
        addressHash: hashData.addressHash,
        addressSig: hashData.addressSig
      }
    })

    identityAddress = createResult.data.counterfactualContractAddress;

    console.log(identityAddress);

    displayMessage(`Counterfactual identity reserved at ${identityAddress}`)

    let fund = await donor.send(identityAddress, 1000000000000000000);

    await provider.waitForTransaction(fund.hash);

    displayMessage(`Counterfactual identity reserved at ${identityAddress} funded.`);

  }


  function hash(signerWallet) {
    const addressHash = utils.solidityKeccak256(['address'], [signerWallet.address]);
    var addressHashBytes = ethers.utils.arrayify(addressHash);
    const addressSig = signerWallet.signMessage(addressHashBytes);
    return { addressHash, addressSig }
  }


  async function buyService() {


    // TODO remove deployment from here
    /*displayMessage(`Deploying ${identityAddress}`);

    let deployResult = await axios({
      method: 'post',
      url: url.deploy,
      data: {
        identityContract: identityAddress
      }
    })

    displayMessage('Identity deployment hash:' + deployResult.data.hash)

    await provider.waitForTransaction(deployResult.data.hash);

    const balance = await provider.getBalance(identityAddress);

    displayMessage(`Counterfactual identity at ${identityAddress} deployed. Balance : ${balance}`); */

    const bc = await signerWallet.provider.getCode(identityAddress)

    const contractDeployed = (bc !== '0x00');

    let slogan = document.getElementById("input_slogan")
    let rewardInput = document.getElementById("input_reward")
    let weiInput = document.getElementById("input_wei")

    let reward = rewardInput.value;
    let wei = weiInput.value;

    let weiNum = Number(wei)
    let rewardNum = Number(reward)

    let serviceContract = new ethers.Contract(serviceContractAddress, serviceContractAbi, signerWallet);

    let serviceDescriptor = (serviceContract.interface.functions.buy(slogan.value));
    let serviceData = serviceDescriptor.data;

    let nonce = utils.bigNumberify(0);
    identityContract = new ethers.Contract(identityAddress, identityProxyAbi, provider);

    if (contractDeployed) {
      nonce = await identityContract.getNonce();
    }

    let serviceDataHash = utils.solidityKeccak256(['bytes', 'uint256', 'uint256', 'address', 'uint256'], [utils.arrayify(serviceData), reward, wei, serviceContractAddress, nonce.toString()]);

    let hashData = ethers.utils.arrayify(serviceDataHash);
    let buyDataHashSignature = signerWallet.signMessage(hashData);

    let result = await axios({
      method: 'post',
      url: url.execute,
      data: {
        identityAddress: identityAddress,
        serviceContractAddress: serviceContractAddress,
        wei: weiNum,
        reward: rewardNum,
        data: serviceData,
        signedDataHash: buyDataHashSignature
      }
    });

    displayMessage('The execution transaction hash is: ' + result.data)

    const txRes = await provider.waitForTransaction(result.data);

    displayMessage('Execution complete');

    console.log(txRes);

    const txReceipt = await provider.getTransactionReceipt(result.data);

    console.log(txReceipt);

    console.log(identityContract.interface);

    const logActionAuthorised = identityContract.interface.events.LogActionAuthorised;
    const logActionExecuted = identityContract.interface.events.LogActionExecuted;
    const logRewardsPaid = identityContract.interface.events.LogRewardsPaid;

    const l1 = logActionAuthorised.parse(txReceipt.logs[0].data);
    console.log(l1.nonce.toString(), l1.signer);

    const l2 = logActionExecuted.parse(txReceipt.logs[1].data);

    console.log(l2.target, l2.value);

    const l3 = logRewardsPaid.parse(txReceipt.logs[2].data);

    console.log(l3.nonce, l3.relayer, l3.rewardPaid.toString(), l3.deployer, l3.deployerRewardPaid.toString());
  }


  function displayMessage(message) {
    let el = document.getElementById("message");
    el.innerHTML = message;
  }


</script>


<h1> Universal ID </h1>

<button type="button" style="margin-left: 60px" onclick="sign()">Sign</button>
<br>
<br>

<input type="text" id="input_slogan" placeholder="Slogan">
<br>
<input type="text" id="input_reward" placeholder="Reward">
<br>
<input type="text" id="input_wei" placeholder="Wei">
<br>
<br>
<button type="button" style="margin-left: 60px" onclick="buyService()">Buy</button>
<br>
<br>
<div id="message"> </div>